#!/usr/bin/env bash

#######################
### BEGIN FUNCTIONS ###
#######################

dot_help() {
  echo 'dot -- dotfiles maintenance'
  echo ''
  echo 'Usage: dot [option] [topics ...]'
  echo ''
  echo 'Options:'
  echo '  -e, --edit      Open the dotfiles directory in an editor'
  echo '  -h, --help      Show this help message and exit'
  echo '  -d, --dump      Update lists of installed packages'
  echo '  -c, --chmod     Fix file permissions in the dotfiles repository'
  echo ''
  echo 'Examples:'
  echo '  dot             Initializes all topics'
  echo '  dot brew        Initializes the `brew` topic'
  echo '  dot brew code   Initializes the `brew` and `code` topics'
  echo '  dot -d brew     Updates the Brewfile with currently installed packages'
  exit
}

dot_dump() {
  for script in $(find "${directories[@]}" -iname "Dumpfile"); do
    run_topic_script "$script";
  done
  exit
}

dot_chmod() {
  for file in $(
    find binaries -type f
    find "${directories[@]}" -iname "*.sh"
    find "${directories[@]}" -iname "*.zsh"
    find "${directories[@]}" -iname "*.dump"
    find "${directories[@]}" -iname "*hook*"
  ); do
    chmod +x "$file"
  done
  exit
}

dot_edit() {
  e
  exit
}

link_file() {
  local src="$1" dst="$2"

  local overwrite= backup= skip=
  local action=

  if [[ -f "$dst" ]] || [[ -d "$dst" ]] || [[ -L "$dst" ]]; then
    if [[ "$overwrite_all" == "" ]] && [[ "$backup_all" == "" ]] && [[ "$skip_all" == "" ]]; then
      local current_src="$(readlink "$dst")"

      if [[ "$current_src" == "$src" ]]; then
        skip=true
      else
        echo "File already exists: $dst ($(basename "$src")), what do you want to do?"
        echo "[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

        read -n 1 action

        echo ""

        case "$action" in
          o) overwrite=true ;;
          O) overwrite_all=true ;;
          b) backup=true ;;
          B) backup_all=true ;;
          s) skip=true ;;
          S) skip_all=true ;;
          *) ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [[ "$overwrite" == "true" ]]; then
      rm -rf "$dst"
      echo "removed $dst"
    fi

    if [[ "$backup" == "true" ]]; then
      mv "$dst" "${dst}.backup"
      echo "moved $dst to ${dst}.backup"
    fi

    if [[ "$skip" == "true" ]]; then
      echo "skipped $src"
    fi
  fi

  if [[ "$skip" != "true" ]]; then
    parent="$(dirname "$2")"
    if [[ ! -d "$parent" ]]; then
      mkdir -p "$parent"
    fi

    ln -s "$1" "$2"

    echo "linked $1 to $2"
  fi
}

run_topic_script() {
  TOPIC="$DOTFILES/$(dirname "$1")"
  cd "$TOPIC"
  echo "> $1"
  source "$(basename "$1")"
  cd - > /dev/null
}

#####################
### END FUNCTIONS ###
#####################

set -e
initial_directory="$(pwd)"
cd "$(dirname "$0")"
export DOTFILES="$(git rev-parse --show-toplevel)"
cd "$DOTFILES"

directories=()
for arg in "$@"; do
  if [[ "$arg" != -* ]]; then
    directories+=("topics/$arg")
  fi
done

if [[ -z "$directories" ]]; then
  directories+=('topics')
fi

case "$1" in
  "-h"|"--help") dot_help ;;
  "-e"|"--edit") dot_edit ;;
  "-d"|"--dump") dot_dump ;;
  "-c"|"--chmod") dot_chmod ;;
  *) ;;
esac

git submodule update --init --recursive

for src in $(find "${directories[@]}" -name '.*' | grep -v '.DS_Store'); do
  dst="$(basename "$src" | sed 's/+/\//g')"
  link_file "$DOTFILES/$src" "$HOME/$dst"
done

for script in $(
  find "${directories[@]}" -name '*.pre.sh'
  find "${directories[@]}" -name '*.sh' ! -name '*.pre.sh' ! -name '*.post.sh'
  find "${directories[@]}" -name '*.post.sh'
); do
  run_topic_script "$script"
done

echo "dotfiles successfully initialized"
cd "$initial_directory"
